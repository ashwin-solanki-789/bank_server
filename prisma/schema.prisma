// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  firstname String
  lastname  String
  email     String    @unique
  tax_id    String    @unique
  password  String
  createdAt DateTime  @default(now())
  accounts  Account[]
}

model Account {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  account_number      Int           @unique()
  balance             Float
  userId              String?       @db.ObjectId
  User                User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sentTransaction     Transaction[] @relation("SenderAccount")
  receivedTransaction Transaction[] @relation("ReceiverAccount")
}

model Transaction {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  senderId    Int
  receiverId  Int
  amount      Float
  description String
  status      TransactionStatus @default(PENDING)
  type        TransactionType   @default(REQUEST)
  sender      Account           @relation("SenderAccount", fields: [senderId], references: [account_number])
  receiver    Account           @relation("ReceiverAccount", fields: [receiverId], references: [account_number])
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now())
}

enum TransactionType {
  REQUEST
  NORMAL
}

enum TransactionStatus {
  PENDING
  CANCELLED
  COMPLETED
  DELETED
}
